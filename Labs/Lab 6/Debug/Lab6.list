
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000063c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d0  080007d0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d0  080007d0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080007d0  080007d0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d0  080007d0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d0  080007d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080007d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000048  08000820  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000820  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d8  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003af  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00020e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df3b  00000000  00000000  00020f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dae  00000000  00000000  0002eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050220  00000000  00000000  0002fc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fe91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000230  00000000  00000000  0007fee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000048 	.word	0x20000048
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007b8 	.word	0x080007b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000004c 	.word	0x2000004c
 80001d0:	080007b8 	.word	0x080007b8

080001d4 <GPIO_EnableClock>:

#define _PUPD_MASK ((unsigned char)0x06)
#define _PUPD_SHIFT 1

void GPIO_EnableClock(unsigned char PortId)
{
 80001d4:	b490      	push	{r4, r7}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  PortId -= 'A';
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	3b41      	subs	r3, #65	; 0x41
 80001e2:	71fb      	strb	r3, [r7, #7]
  *LookUp[PortId][CLOCK] |= (0x01 << PortId); // Enable Clock
 80001e4:	79fa      	ldrb	r2, [r7, #7]
 80001e6:	490e      	ldr	r1, [pc, #56]	; (8000220 <GPIO_EnableClock+0x4c>)
 80001e8:	4613      	mov	r3, r2
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4413      	add	r3, r2
 80001ee:	00db      	lsls	r3, r3, #3
 80001f0:	440b      	add	r3, r1
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	6819      	ldr	r1, [r3, #0]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2201      	movs	r2, #1
 80001fa:	fa02 f303 	lsl.w	r3, r2, r3
 80001fe:	461c      	mov	r4, r3
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <GPIO_EnableClock+0x4c>)
 8000204:	4613      	mov	r3, r2
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	4413      	add	r3, r2
 800020a:	00db      	lsls	r3, r3, #3
 800020c:	4403      	add	r3, r0
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	ea41 0204 	orr.w	r2, r1, r4
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bc90      	pop	{r4, r7}
 800021e:	4770      	bx	lr
 8000220:	20000000 	.word	0x20000000

08000224 <GPIO_Init>:

void GPIO_Init(unsigned char PortId, unsigned char PinNum, unsigned char PinMode, unsigned char DefaultState)
{
 8000224:	b490      	push	{r4, r7}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4604      	mov	r4, r0
 800022c:	4608      	mov	r0, r1
 800022e:	4611      	mov	r1, r2
 8000230:	461a      	mov	r2, r3
 8000232:	4623      	mov	r3, r4
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	4603      	mov	r3, r0
 8000238:	71bb      	strb	r3, [r7, #6]
 800023a:	460b      	mov	r3, r1
 800023c:	717b      	strb	r3, [r7, #5]
 800023e:	4613      	mov	r3, r2
 8000240:	713b      	strb	r3, [r7, #4]
  // GPIO_Init('A', i, OUTPUT, PUSH_PULL);

  PortId -= 'A';
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	3b41      	subs	r3, #65	; 0x41
 8000246:	71fb      	strb	r3, [r7, #7]

  *LookUp[PortId][MODER] &= ~(0x03 << 2 * PinNum);
 8000248:	79fa      	ldrb	r2, [r7, #7]
 800024a:	4959      	ldr	r1, [pc, #356]	; (80003b0 <GPIO_Init+0x18c>)
 800024c:	4613      	mov	r3, r2
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	4413      	add	r3, r2
 8000252:	00db      	lsls	r3, r3, #3
 8000254:	440b      	add	r3, r1
 8000256:	3304      	adds	r3, #4
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	6819      	ldr	r1, [r3, #0]
 800025c:	79bb      	ldrb	r3, [r7, #6]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2203      	movs	r2, #3
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	461c      	mov	r4, r3
 800026a:	79fa      	ldrb	r2, [r7, #7]
 800026c:	4850      	ldr	r0, [pc, #320]	; (80003b0 <GPIO_Init+0x18c>)
 800026e:	4613      	mov	r3, r2
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	4413      	add	r3, r2
 8000274:	00db      	lsls	r3, r3, #3
 8000276:	4403      	add	r3, r0
 8000278:	3304      	adds	r3, #4
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	ea01 0204 	and.w	r2, r1, r4
 8000280:	601a      	str	r2, [r3, #0]
  *LookUp[PortId][MODER] |= PinMode << 2 * PinNum;
 8000282:	79fa      	ldrb	r2, [r7, #7]
 8000284:	494a      	ldr	r1, [pc, #296]	; (80003b0 <GPIO_Init+0x18c>)
 8000286:	4613      	mov	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	4413      	add	r3, r2
 800028c:	00db      	lsls	r3, r3, #3
 800028e:	440b      	add	r3, r1
 8000290:	3304      	adds	r3, #4
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	6819      	ldr	r1, [r3, #0]
 8000296:	797a      	ldrb	r2, [r7, #5]
 8000298:	79bb      	ldrb	r3, [r7, #6]
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	fa02 f303 	lsl.w	r3, r2, r3
 80002a0:	461c      	mov	r4, r3
 80002a2:	79fa      	ldrb	r2, [r7, #7]
 80002a4:	4842      	ldr	r0, [pc, #264]	; (80003b0 <GPIO_Init+0x18c>)
 80002a6:	4613      	mov	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4413      	add	r3, r2
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	4403      	add	r3, r0
 80002b0:	3304      	adds	r3, #4
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	ea41 0204 	orr.w	r2, r1, r4
 80002b8:	601a      	str	r2, [r3, #0]

  *LookUp[PortId][OTYPER] &= ~(1 << PinNum);
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	493c      	ldr	r1, [pc, #240]	; (80003b0 <GPIO_Init+0x18c>)
 80002be:	4613      	mov	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	4413      	add	r3, r2
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	440b      	add	r3, r1
 80002c8:	3308      	adds	r3, #8
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6819      	ldr	r1, [r3, #0]
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	2201      	movs	r2, #1
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	461c      	mov	r4, r3
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	4834      	ldr	r0, [pc, #208]	; (80003b0 <GPIO_Init+0x18c>)
 80002de:	4613      	mov	r3, r2
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	4413      	add	r3, r2
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4403      	add	r3, r0
 80002e8:	3308      	adds	r3, #8
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	ea01 0204 	and.w	r2, r1, r4
 80002f0:	601a      	str	r2, [r3, #0]
  *LookUp[PortId][OTYPER] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80002f2:	79fa      	ldrb	r2, [r7, #7]
 80002f4:	492e      	ldr	r1, [pc, #184]	; (80003b0 <GPIO_Init+0x18c>)
 80002f6:	4613      	mov	r3, r2
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	4413      	add	r3, r2
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	440b      	add	r3, r1
 8000300:	3308      	adds	r3, #8
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6819      	ldr	r1, [r3, #0]
 8000306:	793b      	ldrb	r3, [r7, #4]
 8000308:	f003 0201 	and.w	r2, r3, #1
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	461c      	mov	r4, r3
 8000314:	79fa      	ldrb	r2, [r7, #7]
 8000316:	4826      	ldr	r0, [pc, #152]	; (80003b0 <GPIO_Init+0x18c>)
 8000318:	4613      	mov	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	4413      	add	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	4403      	add	r3, r0
 8000322:	3308      	adds	r3, #8
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	ea41 0204 	orr.w	r2, r1, r4
 800032a:	601a      	str	r2, [r3, #0]

  *LookUp[PortId][PUPDR] &= ~(0x03 << 2 * PinNum);
 800032c:	79fa      	ldrb	r2, [r7, #7]
 800032e:	4920      	ldr	r1, [pc, #128]	; (80003b0 <GPIO_Init+0x18c>)
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	440b      	add	r3, r1
 800033a:	330c      	adds	r3, #12
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	2203      	movs	r2, #3
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43db      	mvns	r3, r3
 800034c:	461c      	mov	r4, r3
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	4817      	ldr	r0, [pc, #92]	; (80003b0 <GPIO_Init+0x18c>)
 8000352:	4613      	mov	r3, r2
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	4413      	add	r3, r2
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	4403      	add	r3, r0
 800035c:	330c      	adds	r3, #12
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	ea01 0204 	and.w	r2, r1, r4
 8000364:	601a      	str	r2, [r3, #0]
  *LookUp[PortId][PUPDR] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	4911      	ldr	r1, [pc, #68]	; (80003b0 <GPIO_Init+0x18c>)
 800036a:	4613      	mov	r3, r2
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4413      	add	r3, r2
 8000370:	00db      	lsls	r3, r3, #3
 8000372:	440b      	add	r3, r1
 8000374:	330c      	adds	r3, #12
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6819      	ldr	r1, [r3, #0]
 800037a:	793b      	ldrb	r3, [r7, #4]
 800037c:	105b      	asrs	r3, r3, #1
 800037e:	f003 0203 	and.w	r2, r3, #3
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	461c      	mov	r4, r3
 800038c:	79fa      	ldrb	r2, [r7, #7]
 800038e:	4808      	ldr	r0, [pc, #32]	; (80003b0 <GPIO_Init+0x18c>)
 8000390:	4613      	mov	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	4403      	add	r3, r0
 800039a:	330c      	adds	r3, #12
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	ea41 0204 	orr.w	r2, r1, r4
 80003a2:	601a      	str	r2, [r3, #0]
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc90      	pop	{r4, r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000

080003b4 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PortId, unsigned char PinNum, unsigned char Data)
{
 80003b4:	b490      	push	{r4, r7}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	460b      	mov	r3, r1
 80003c0:	71bb      	strb	r3, [r7, #6]
 80003c2:	4613      	mov	r3, r2
 80003c4:	717b      	strb	r3, [r7, #5]
  unsigned char result;
  PortId -= 'A'; //   result = 0 or 1
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3b41      	subs	r3, #65	; 0x41
 80003ca:	71fb      	strb	r3, [r7, #7]
  if (((*LookUp[PortId][MODER] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1)
 80003cc:	79fa      	ldrb	r2, [r7, #7]
 80003ce:	492d      	ldr	r1, [pc, #180]	; (8000484 <GPIO_WritePin+0xd0>)
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	440b      	add	r3, r1
 80003da:	3304      	adds	r3, #4
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	79ba      	ldrb	r2, [r7, #6]
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	2103      	movs	r1, #3
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	401a      	ands	r2, r3
 80003ec:	79bb      	ldrb	r3, [r7, #6]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	fa22 f303 	lsr.w	r3, r2, r3
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d13d      	bne.n	8000474 <GPIO_WritePin+0xc0>
  {
    if (Data)
 80003f8:	797b      	ldrb	r3, [r7, #5]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d01b      	beq.n	8000436 <GPIO_WritePin+0x82>
    {
      *LookUp[PortId][ODR] |= (1 << PinNum);
 80003fe:	79fa      	ldrb	r2, [r7, #7]
 8000400:	4920      	ldr	r1, [pc, #128]	; (8000484 <GPIO_WritePin+0xd0>)
 8000402:	4613      	mov	r3, r2
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4413      	add	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	440b      	add	r3, r1
 800040c:	3314      	adds	r3, #20
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	2201      	movs	r2, #1
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	461c      	mov	r4, r3
 800041c:	79fa      	ldrb	r2, [r7, #7]
 800041e:	4819      	ldr	r0, [pc, #100]	; (8000484 <GPIO_WritePin+0xd0>)
 8000420:	4613      	mov	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4413      	add	r3, r2
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	4403      	add	r3, r0
 800042a:	3314      	adds	r3, #20
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	ea41 0204 	orr.w	r2, r1, r4
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	e01b      	b.n	800046e <GPIO_WritePin+0xba>
    }
    else
    {
      *LookUp[PortId][ODR] &= ~(1 << PinNum);
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	4912      	ldr	r1, [pc, #72]	; (8000484 <GPIO_WritePin+0xd0>)
 800043a:	4613      	mov	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	4413      	add	r3, r2
 8000440:	00db      	lsls	r3, r3, #3
 8000442:	440b      	add	r3, r1
 8000444:	3314      	adds	r3, #20
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	6819      	ldr	r1, [r3, #0]
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2201      	movs	r2, #1
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	43db      	mvns	r3, r3
 8000454:	461c      	mov	r4, r3
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	480a      	ldr	r0, [pc, #40]	; (8000484 <GPIO_WritePin+0xd0>)
 800045a:	4613      	mov	r3, r2
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	4413      	add	r3, r2
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	4403      	add	r3, r0
 8000464:	3314      	adds	r3, #20
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	ea01 0204 	and.w	r2, r1, r4
 800046c:	601a      	str	r2, [r3, #0]
    }
    result = OK;
 800046e:	2300      	movs	r3, #0
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	e001      	b.n	8000478 <GPIO_WritePin+0xc4>
  }
  else
  {
    result = NOK;
 8000474:	2301      	movs	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8000478:	7bfb      	ldrb	r3, [r7, #15]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bc90      	pop	{r4, r7}
 8000482:	4770      	bx	lr
 8000484:	20000000 	.word	0x20000000

08000488 <GPIO_ReadPin>:

unsigned char GPIO_ReadPin(unsigned char PortId, unsigned char PinNum)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	460a      	mov	r2, r1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	4613      	mov	r3, r2
 8000496:	71bb      	strb	r3, [r7, #6]
  PortId -= 'A'; //   result = 0 or 1
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	3b41      	subs	r3, #65	; 0x41
 800049c:	71fb      	strb	r3, [r7, #7]
  unsigned char data = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	73fb      	strb	r3, [r7, #15]

  data = (*LookUp[PortId][IDR] & (1 << PinNum)) >> PinNum;
 80004a2:	79fa      	ldrb	r2, [r7, #7]
 80004a4:	490c      	ldr	r1, [pc, #48]	; (80004d8 <GPIO_ReadPin+0x50>)
 80004a6:	4613      	mov	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	4413      	add	r3, r2
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	440b      	add	r3, r1
 80004b0:	3310      	adds	r3, #16
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	2101      	movs	r1, #1
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	401a      	ands	r2, r3
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	fa22 f303 	lsr.w	r3, r2, r3
 80004c6:	73fb      	strb	r3, [r7, #15]

  return data;
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000

080004dc <delay30ms>:
unsigned char Keypad_Pressed_Value;
unsigned char buttonState = 0;
unsigned char Keypad_Matrix[4][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {0, 0, 0}};

void delay30ms()
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
    for (unsigned int i = 0; i < 30000; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e002      	b.n	80004ee <delay30ms+0x12>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3301      	adds	r3, #1
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d9f7      	bls.n	80004e8 <delay30ms+0xc>
    {
    }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <Keypad_Init>:

void Keypad_Init()
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
    unsigned char i;
    GPIO_EnableClock('B');
 800050c:	2042      	movs	r0, #66	; 0x42
 800050e:	f7ff fe61 	bl	80001d4 <GPIO_EnableClock>

    // Columns as output
    for (i = 0; i < 3; i++)
 8000512:	2300      	movs	r3, #0
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	e008      	b.n	800052a <Keypad_Init+0x24>
    {
        GPIO_Init('B', i, OUTPUT, PUSH_PULL);
 8000518:	79f9      	ldrb	r1, [r7, #7]
 800051a:	2300      	movs	r3, #0
 800051c:	2201      	movs	r2, #1
 800051e:	2042      	movs	r0, #66	; 0x42
 8000520:	f7ff fe80 	bl	8000224 <GPIO_Init>
    for (i = 0; i < 3; i++)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	3301      	adds	r3, #1
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d9f3      	bls.n	8000518 <Keypad_Init+0x12>
    }
    // Rows as input
    for (i = 3; i < 7; i++)
 8000530:	2303      	movs	r3, #3
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	e008      	b.n	8000548 <Keypad_Init+0x42>
    {
        GPIO_Init('B', i, INPUT, PULL_UP);
 8000536:	79f9      	ldrb	r1, [r7, #7]
 8000538:	2302      	movs	r3, #2
 800053a:	2200      	movs	r2, #0
 800053c:	2042      	movs	r0, #66	; 0x42
 800053e:	f7ff fe71 	bl	8000224 <GPIO_Init>
    for (i = 3; i < 7; i++)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3301      	adds	r3, #1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d9f3      	bls.n	8000536 <Keypad_Init+0x30>
    }
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <Keypad_Manage>:

void Keypad_Manage()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
    unsigned char i;
    unsigned char j;
    if (buttonState == 0)
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <Keypad_Manage+0xe4>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d165      	bne.n	8000632 <Keypad_Manage+0xda>
    {
        for (i = 0; i < 3; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	e05f      	b.n	800062c <Keypad_Manage+0xd4>
        {
            // Reset 1 column and set the others
            GPIO_WritePin('B', i % 3, 0);
 800056c:	79fa      	ldrb	r2, [r7, #7]
 800056e:	4b34      	ldr	r3, [pc, #208]	; (8000640 <Keypad_Manage+0xe8>)
 8000570:	fba3 1302 	umull	r1, r3, r3, r2
 8000574:	0859      	lsrs	r1, r3, #1
 8000576:	460b      	mov	r3, r1
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	440b      	add	r3, r1
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2200      	movs	r2, #0
 8000582:	4619      	mov	r1, r3
 8000584:	2042      	movs	r0, #66	; 0x42
 8000586:	f7ff ff15 	bl	80003b4 <GPIO_WritePin>
            GPIO_WritePin('B', (i + 1) % 3, 1);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <Keypad_Manage+0xec>)
 8000590:	fb83 3102 	smull	r3, r1, r3, r2
 8000594:	17d3      	asrs	r3, r2, #31
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	460b      	mov	r3, r1
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	440b      	add	r3, r1
 800059e:	1ad1      	subs	r1, r2, r3
 80005a0:	b2cb      	uxtb	r3, r1
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2042      	movs	r0, #66	; 0x42
 80005a8:	f7ff ff04 	bl	80003b4 <GPIO_WritePin>
            GPIO_WritePin('B', (i + 2) % 3, 1);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	1c9a      	adds	r2, r3, #2
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <Keypad_Manage+0xec>)
 80005b2:	fb83 3102 	smull	r3, r1, r3, r2
 80005b6:	17d3      	asrs	r3, r2, #31
 80005b8:	1ac9      	subs	r1, r1, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	440b      	add	r3, r1
 80005c0:	1ad1      	subs	r1, r2, r3
 80005c2:	b2cb      	uxtb	r3, r1
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	2042      	movs	r0, #66	; 0x42
 80005ca:	f7ff fef3 	bl	80003b4 <GPIO_WritePin>

            for (j = 3; j < 7; j++)
 80005ce:	2303      	movs	r3, #3
 80005d0:	71bb      	strb	r3, [r7, #6]
 80005d2:	e025      	b.n	8000620 <Keypad_Manage+0xc8>
            {
                // Read input pins
                if (GPIO_ReadPin('B', j) == 0)
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	4619      	mov	r1, r3
 80005d8:	2042      	movs	r0, #66	; 0x42
 80005da:	f7ff ff55 	bl	8000488 <GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d11a      	bne.n	800061a <Keypad_Manage+0xc2>
                {
                    delay30ms();
 80005e4:	f7ff ff7a 	bl	80004dc <delay30ms>
                    if (GPIO_ReadPin('B', j) == 0)
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	4619      	mov	r1, r3
 80005ec:	2042      	movs	r0, #66	; 0x42
 80005ee:	f7ff ff4b 	bl	8000488 <GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d110      	bne.n	800061a <Keypad_Manage+0xc2>
                    {
                        // Change buttonState
                        buttonState = 1;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <Keypad_Manage+0xe4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
                        // Store the pressed key value
                        Keypad_Pressed_Value = Keypad_Matrix[j - 3][i];
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	1eda      	subs	r2, r3, #3
 8000602:	79f9      	ldrb	r1, [r7, #7]
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <Keypad_Manage+0xf0>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	4403      	add	r3, r0
 800060e:	440b      	add	r3, r1
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <Keypad_Manage+0xf4>)
 8000614:	701a      	strb	r2, [r3, #0]
                        KeypadCallouts_KeyPressNotificaton();
 8000616:	f000 f82b 	bl	8000670 <KeypadCallouts_KeyPressNotificaton>
            for (j = 3; j < 7; j++)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	3301      	adds	r3, #1
 800061e:	71bb      	strb	r3, [r7, #6]
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b06      	cmp	r3, #6
 8000624:	d9d6      	bls.n	80005d4 <Keypad_Manage+0x7c>
        for (i = 0; i < 3; i++)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d99c      	bls.n	800056c <Keypad_Manage+0x14>
                    }
                }
            }
        }
    }
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000064 	.word	0x20000064
 8000640:	aaaaaaab 	.word	0xaaaaaaab
 8000644:	55555556 	.word	0x55555556
 8000648:	20000030 	.word	0x20000030
 800064c:	20000065 	.word	0x20000065

08000650 <Keypad_GetKey>:

unsigned char Keypad_GetKey()
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
    // Change buttonState
    buttonState = 0;
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <Keypad_GetKey+0x18>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
    // Return the pressed key value
    return Keypad_Pressed_Value;
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <Keypad_GetKey+0x1c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000064 	.word	0x20000064
 800066c:	20000065 	.word	0x20000065

08000670 <KeypadCallouts_KeyPressNotificaton>:
#include "Keypad.h"
unsigned char sevenSegHex[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66,
                                 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void KeypadCallouts_KeyPressNotificaton()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    // Get the pressed key value
    unsigned char value = Keypad_GetKey();
 8000676:	f7ff ffeb 	bl	8000650 <Keypad_GetKey>
 800067a:	4603      	mov	r3, r0
 800067c:	71bb      	strb	r3, [r7, #6]
    // Display the pressed key on the seven segment
    for (unsigned char i = 0; i < 7; i++)
 800067e:	2300      	movs	r3, #0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e015      	b.n	80006b0 <KeypadCallouts_KeyPressNotificaton+0x40>
    {
        GPIO_WritePin('A', i, (sevenSegHex[value] & (1 << i)) >> i);
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <KeypadCallouts_KeyPressNotificaton+0x50>)
 8000688:	5cd3      	ldrb	r3, [r2, r3]
 800068a:	4619      	mov	r1, r3
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2201      	movs	r2, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	ea01 0203 	and.w	r2, r1, r3
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	fa42 f303 	asr.w	r3, r2, r3
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4619      	mov	r1, r3
 80006a4:	2041      	movs	r0, #65	; 0x41
 80006a6:	f7ff fe85 	bl	80003b4 <GPIO_WritePin>
    for (unsigned char i = 0; i < 7; i++)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d9e6      	bls.n	8000684 <KeypadCallouts_KeyPressNotificaton+0x14>
    }
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000003c 	.word	0x2000003c

080006c4 <main>:

int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
    // initialization of seven-segment
    GPIO_EnableClock('A');
 80006ca:	2041      	movs	r0, #65	; 0x41
 80006cc:	f7ff fd82 	bl	80001d4 <GPIO_EnableClock>
    for (unsigned char i = 0; i < 7; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	e008      	b.n	80006e8 <main+0x24>
    {
        GPIO_Init('A', i, OUTPUT, PUSH_PULL);
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	2300      	movs	r3, #0
 80006da:	2201      	movs	r2, #1
 80006dc:	2041      	movs	r0, #65	; 0x41
 80006de:	f7ff fda1 	bl	8000224 <GPIO_Init>
    for (unsigned char i = 0; i < 7; i++)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	3301      	adds	r3, #1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d9f3      	bls.n	80006d6 <main+0x12>
    }

    // initialization of keypad
    Keypad_Init();
 80006ee:	f7ff ff0a 	bl	8000506 <Keypad_Init>

    while (1)
    {

        Keypad_Manage();
 80006f2:	f7ff ff31 	bl	8000558 <Keypad_Manage>
 80006f6:	e7fc      	b.n	80006f2 <main+0x2e>

080006f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <SystemInit+0x20>)
 80006fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <SystemInit+0x20>)
 8000704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800071c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000722:	490e      	ldr	r1, [pc, #56]	; (800075c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000724:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000738:	4c0b      	ldr	r4, [pc, #44]	; (8000768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000746:	f7ff ffd7 	bl	80006f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074a:	f000 f811 	bl	8000770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800074e:	f7ff ffb9 	bl	80006c4 <main>
  bx  lr    
 8000752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000754:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000760:	080007d8 	.word	0x080007d8
  ldr r2, =_sbss
 8000764:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000768:	20000068 	.word	0x20000068

0800076c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC_IRQHandler>
	...

08000770 <__libc_init_array>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	4d0d      	ldr	r5, [pc, #52]	; (80007a8 <__libc_init_array+0x38>)
 8000774:	4c0d      	ldr	r4, [pc, #52]	; (80007ac <__libc_init_array+0x3c>)
 8000776:	1b64      	subs	r4, r4, r5
 8000778:	10a4      	asrs	r4, r4, #2
 800077a:	2600      	movs	r6, #0
 800077c:	42a6      	cmp	r6, r4
 800077e:	d109      	bne.n	8000794 <__libc_init_array+0x24>
 8000780:	4d0b      	ldr	r5, [pc, #44]	; (80007b0 <__libc_init_array+0x40>)
 8000782:	4c0c      	ldr	r4, [pc, #48]	; (80007b4 <__libc_init_array+0x44>)
 8000784:	f000 f818 	bl	80007b8 <_init>
 8000788:	1b64      	subs	r4, r4, r5
 800078a:	10a4      	asrs	r4, r4, #2
 800078c:	2600      	movs	r6, #0
 800078e:	42a6      	cmp	r6, r4
 8000790:	d105      	bne.n	800079e <__libc_init_array+0x2e>
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f855 3b04 	ldr.w	r3, [r5], #4
 8000798:	4798      	blx	r3
 800079a:	3601      	adds	r6, #1
 800079c:	e7ee      	b.n	800077c <__libc_init_array+0xc>
 800079e:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a2:	4798      	blx	r3
 80007a4:	3601      	adds	r6, #1
 80007a6:	e7f2      	b.n	800078e <__libc_init_array+0x1e>
 80007a8:	080007d0 	.word	0x080007d0
 80007ac:	080007d0 	.word	0x080007d0
 80007b0:	080007d0 	.word	0x080007d0
 80007b4:	080007d4 	.word	0x080007d4

080007b8 <_init>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	bf00      	nop
 80007bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007be:	bc08      	pop	{r3}
 80007c0:	469e      	mov	lr, r3
 80007c2:	4770      	bx	lr

080007c4 <_fini>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	bf00      	nop
 80007c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ca:	bc08      	pop	{r3}
 80007cc:	469e      	mov	lr, r3
 80007ce:	4770      	bx	lr
